{"version":3,"sources":["utils/battle.js","components/BattleDice/BattleDice.js","components/HeroscapeSimulator/HeroscapeSimulator.js","App.js","reportWebVitals.js","index.js"],"names":["rollDice","amount","sides","results","i","push","Math","floor","random","findDiceHits","resultDice","hitTargets","hits","forEach","die","includes","calcDamage","attackRoll","defenceRoll","constants","ATTACK_HITS","DEFENCE_HITS","BattleDice","props","state","value","side","borderColor","diceType","symbol","symbols","className","this","Component","HeroscapeSimulator","handleRollsAmountChange","e","setState","rollsAmount","target","handleAttackAmountChange","attackAmount","handleDefenceAmountChange","defenceAmount","handleHistoryLengthChange","historyLength","handleRunSingleBattleClick","runSingleBattle","handleRunBattlesClick","singleBattleDamage","rollHistory","id","type","onChange","onClick","hidden","renderRoll","renderPreviousRolls","console","log","attack","defence","unshift","length","slice","key","background","damage","displayDice","map","roll","rollResults","dice","App","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53e60f97.chunk.js","sourcesContent":["import constants from '../data/constants.json'\n\nexport function runBattle(attack, defence) {\n\n    // Attack roll\n    const attackRoll = rollDice(attack, 6);\n\n    // Defence roll\n    const defenceRoll = rollDice(defence, 6);\n\n    return {attackRoll, defenceRoll};\n}\n\nfunction rollDice(amount, sides) {\n    const results = [];\n    for (let i = 0; i < amount; i++) {\n        results.push(Math.floor(Math.random() * sides) + 1);\n    }\n\n    return results;\n}\n\nexport function findDiceHits(resultDice, hitTargets) {\n    let hits = 0;\n    resultDice?.forEach(die => {\n        if (hitTargets.includes(die)) {\n            hits++;\n        }\n    });\n\n    return hits;\n}\n\nexport function calcDamage(attackRoll, defenceRoll) {\n    const attackHits = findDiceHits(attackRoll, constants.ATTACK_HITS);\n    const defenceHits = findDiceHits(defenceRoll, constants.DEFENCE_HITS);\n    const damage = attackHits - defenceHits;\n\n    return damage;\n}","import React, { Component } from 'react';\nimport '../../index.css'\nimport constants from '../../data/constants.json'\nimport symbols from '../../data/symbols.json'\n\nexport default class BattleDice extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    \n    if (constants.ATTACK_HITS.includes(this.props.value)) {\n      this.side = \"skull\";\n      this.borderColor = this.props.diceType === \"attack\" ? \"red\" : \"black\";\n    } else if (constants.DEFENCE_HITS.includes(this.props.value)) {\n      this.side = \"shield\";\n      this.borderColor = this.props.diceType === \"defence\" ? \"blue\" : \"black\";\n    } else {\n      this.side = \"blank\";\n      this.borderColor = \"black\";\n    }\n\n    this.symbol = symbols[this.side];\n  }\n\n  render() {\n    return(\n      <div className={`unit-container post-spaced square-die ${this.borderColor}-border`}>\n        {this.symbol}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { calcDamage, runBattle } from '../../utils/battle';\nimport '../../index.css'\nimport BattleDice from '../BattleDice/BattleDice';\n\nexport default class HeroscapeSimulator extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      rollsAmount: 10,\n      attackAmount: 3,\n      defenceAmount: 3,\n      historyLength: 3,\n      singleBattleDamage: 0\n    };\n\n    this.rollHistory = [];\n  }\n\n  // Change handlers\n  handleRollsAmountChange = (e) => { this.setState({rollsAmount: e.target.value}) };\n  handleAttackAmountChange = (e) => { this.setState({attackAmount: e.target.value}) };\n  handleDefenceAmountChange = (e) => { this.setState({defenceAmount: e.target.value}) };\n  handleHistoryLengthChange = (e) => { this.setState({historyLength: e.target.value}) };\n\n  // Click handlers\n  handleRunSingleBattleClick = () => { this.runSingleBattle() };\n  handleRunBattlesClick = () => {\n    for (let i = 0; i < this.state.rollsAmount; i++) {\n      this.runSingleBattle();\n    }\n  };\n\n  render() {\n    return(\n      <div>\n        <h1>Heroscape Simulator</h1>\n        <div className=\"container-row\">\n          <div className=\"unit-container\">\n            <h3 className=\"label\">Rolls:</h3>\n            <input \n              id=\"rollsAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.rollsAmount}\n              onChange={this.handleRollsAmountChange}\n            />\n          </div>\n          <div className=\"unit-container red-border\">\n            <h3 className=\"label\">Attack:</h3>\n            <input \n              id=\"attackAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.attackAmount}\n              onChange={this.handleAttackAmountChange}\n            />\n          </div>\n          <div className=\"unit-container blue-border\">\n            <h3 className=\"label\">Defence:</h3>\n            <input \n              id=\"defenceAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.defenceAmount}\n              onChange={this.handleDefenceAmountChange}\n            />\n          </div>\n          <div className=\"unit-container\">\n            <h3 className=\"label\">History Length:</h3>\n            <input \n              id=\"historyLength\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.historyLength}\n              onChange={this.handleHistoryLengthChange}\n            />\n          </div>\n        </div>\n        <div className=\"container-row\">\n          <button\n            id=\"run-single-battle-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleRunSingleBattleClick}\n          >Run single battle</button>\n          <button\n            hidden\n            id=\"run-battles-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleRunBattlesClick}\n          >Run battles</button>\n        </div>\n        {this.renderRoll(this.state.attackRoll, this.state.defenceRoll, \"currentRoll\", true)}\n        <div className=\"spacer\"></div>\n        <div className=\"spacer\"></div>\n        {this.renderPreviousRolls()}\n      </div>\n    )\n  }\n\n  runSingleBattle() {\n    console.log(\"meow\")\n    const {attackRoll, defenceRoll} = runBattle(this.state.attackAmount, this.state.defenceAmount);\n\n    this.rollHistory.unshift({\n      attackRoll: [...this.state.attackRoll ?? []],\n      defenceRoll: [...this.state.defenceRoll ?? []]\n    })\n\n    if (this.rollHistory.length > this.state.historyLength) {\n      this.rollHistory = this.rollHistory.slice(0, this.state.historyLength);\n    }\n\n    this.setState({\n      attackRoll,\n      defenceRoll\n    });\n\n    return calcDamage(attackRoll, defenceRoll);\n  }\n\n  renderRoll(attackRoll, defenceRoll, key, background = false) {\n\n    const damage = calcDamage(attackRoll, defenceRoll)\n\n    return ( \n      attackRoll?.length > 0 || defenceRoll?.length > 0 ?\n      \n        <div\n          className={`container-row unit-container side-spaced no-border ${!background ? \"no-background\" : \"\"}`}\n          key={key}\n        >\n          <div className=\"container-row row-double-spaced leading-list\">\n            {this.displayDice(\"attack\", attackRoll)}\n          </div>\n          <div className=\"label row-auto-spaced\">\n            {\"-->\"}\n          </div>\n          <div className=\"container-row row-double-spaced leading-list\">\n            {this.displayDice(\"defence\", defenceRoll)}\n          </div>\n          <h3 className=\"label\">Damage:</h3>\n          <p className=\"result-value\">{damage < 0 ? 0 : damage}</p>\n        </div> : null\n    );\n  }\n\n  renderPreviousRolls() {\n    console.log(this.rollHistory)\n    return this.rollHistory.map((roll, i) => {\n      return this.renderRoll(roll.attackRoll, roll.defenceRoll, `previousRoll-${i}`);\n    });\n  }\n\n  displayDice(type, rollResults = []) {\n    const dice = [];\n    rollResults.forEach((die, i) => {\n      dice.push(\n        <BattleDice diceType={type} value={die} key={`${i}-${type}-${die}`}></BattleDice>\n      )\n    });\n\n    return dice;\n  }\n}","import React, { Component } from 'react';\nimport HeroscapeSimulator from \"./components/HeroscapeSimulator/HeroscapeSimulator\";\n\nclass App extends Component {\n  constructor(){\n      super();\n\n      this.state = {\n          result: \"\"\n      }\n  }\n\n  render() {\n      return (\n          <div>\n              <div className=\"component-body\">\n                  <HeroscapeSimulator></HeroscapeSimulator>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}