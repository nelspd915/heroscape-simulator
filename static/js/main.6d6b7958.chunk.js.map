{"version":3,"sources":["utils/battle.js","utils/math.js","components/BattleDice/BattleDice.js","components/HeroscapeSimulator/HeroscapeSimulator.js","App.js","reportWebVitals.js","index.js"],"names":["rollDice","amount","sides","results","i","push","Math","floor","random","findDiceHits","resultDice","hitTargets","hits","forEach","die","includes","calcDamage","attackRoll","defenceRoll","constants","ATTACK_HITS","DEFENCE_HITS","flattenNegative","value","flattenedAverage","values","sum","round","num","places","Number","EPSILON","BattleDice","props","state","side","borderColor","diceType","symbol","symbols","className","this","Component","HeroscapeSimulator","handleRollsAmountChange","e","setState","rollsAmount","target","handleAttackAmountChange","attackAmount","handleDefenceAmountChange","defenceAmount","handleHistoryLengthChange","historyLength","handleRunSingleBattleClick","damage","runSingleBattle","avgDamage","handleRunBattlesClick","damages","handleClearClick","rollHistory","damageTracker","battleCounter","latestBattleRoll","undefined","cumAvgDamage","singleBattleDamage","id","type","onChange","onClick","renderRoll","renderPreviousRolls","unshift","attack","defence","length","slice","key","background","displayDice","rolls","map","roll","rollResults","dice","App","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d6b7958.chunk.js","sourcesContent":["import constants from '../data/constants.json'\n\nexport function runBattle(attack, defence) {\n\n    // Attack roll\n    const attackRoll = rollDice(attack, 6);\n\n    // Defence roll\n    const defenceRoll = rollDice(defence, 6);\n\n    return {attackRoll, defenceRoll};\n}\n\nfunction rollDice(amount, sides) {\n    const results = [];\n    for (let i = 0; i < amount; i++) {\n        results.push(Math.floor(Math.random() * sides) + 1);\n    }\n\n    return results;\n}\n\nexport function findDiceHits(resultDice, hitTargets) {\n    let hits = 0;\n    resultDice?.forEach(die => {\n        if (hitTargets.includes(die)) {\n            hits++;\n        }\n    });\n\n    return hits;\n}\n\nexport function calcDamage(attackRoll, defenceRoll) {\n    const attackHits = findDiceHits(attackRoll, constants.ATTACK_HITS);\n    const defenceHits = findDiceHits(defenceRoll, constants.DEFENCE_HITS);\n    const damage = attackHits - defenceHits;\n\n    return damage;\n}","export function flattenNegative(value) {\n    return value < 0 ? 0 : value;\n}\n\nexport function flattenedAverage(values) {\n    let sum = 0;\n    let i = 0;\n    values.forEach(value => {\n      sum += flattenNegative(value);\n      i++;\n    });\n\n    return sum / i;\n}\n\nexport function round(num, places) {\n    return Math.round((num + Number.EPSILON) * 10**places) / 10**places\n}","import React, { Component } from 'react';\nimport '../../index.css'\nimport constants from '../../data/constants.json'\nimport symbols from '../../data/symbols.json'\n\nexport default class BattleDice extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    \n    if (constants.ATTACK_HITS.includes(this.props.value)) {\n      this.side = \"skull\";\n      this.borderColor = this.props.diceType === \"attack\" ? \"red\" : \"black\";\n    } else if (constants.DEFENCE_HITS.includes(this.props.value)) {\n      this.side = \"shield\";\n      this.borderColor = this.props.diceType === \"defence\" ? \"blue\" : \"black\";\n    } else {\n      this.side = \"blank\";\n      this.borderColor = \"black\";\n    }\n\n    this.symbol = symbols[this.side];\n  }\n\n  render() {\n    return(\n      <div className={`unit-container post-spaced square-die ${this.borderColor}-border`}>\n        {this.symbol}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { calcDamage, runBattle } from '../../utils/battle';\nimport { flattenedAverage, flattenNegative, round } from '../../utils/math'\nimport '../../index.css'\nimport BattleDice from '../BattleDice/BattleDice';\n\nexport default class HeroscapeSimulator extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      rollsAmount: 10,\n      attackAmount: 3,\n      defenceAmount: 3,\n      historyLength: 3,\n      battleCounter: 0,\n      singleBattleDamage: 0,\n      damageTracker: []\n    };\n\n    this.rollHistory = [];\n    this.damageTracker = [];\n    this.battleCounter = 0;\n  }\n\n  // Change handlers\n  handleRollsAmountChange = (e) => { this.setState({rollsAmount: e.target.value}) };\n  handleAttackAmountChange = (e) => { this.setState({attackAmount: e.target.value}) };\n  handleDefenceAmountChange = (e) => { this.setState({defenceAmount: e.target.value}) };\n  handleHistoryLengthChange = (e) => { this.setState({historyLength: e.target.value}) };\n\n  // Click handlers\n  handleRunSingleBattleClick = () => {\n    const damage = this.runSingleBattle()\n\n    this.setState({\n      avgDamage: flattenNegative(damage)\n    });\n  };\n  handleRunBattlesClick = () => {\n    const damages = [];\n    for (let i = 0; i < this.state.rollsAmount; i++) {\n      damages.push(this.runSingleBattle());\n    }\n\n    this.setState({\n      avgDamage: flattenedAverage(damages)\n    });\n  };\n  handleClearClick = () => {\n    this.rollHistory = [];\n    this.damageTracker = [];\n    this.battleCounter = 0;\n    this.latestBattleRoll = undefined;\n    this.setState({\n      attackRoll: undefined,\n      defenceRoll: undefined,\n      battleCounter: this.battleCounter,\n      avgDamage: 0,\n      damageTracker: [],\n      cumAvgDamage: undefined\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <h1>Heroscape Simulator</h1>\n        <div className=\"container-row\">\n          <div className=\"unit-container\">\n            <h3 className=\"label\">Rolls:</h3>\n            <input \n              id=\"rollsAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.rollsAmount}\n              onChange={this.handleRollsAmountChange}\n            />\n          </div>\n          <div className=\"unit-container red-border\">\n            <h3 className=\"label\">Attack:</h3>\n            <input \n              id=\"attackAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.attackAmount}\n              onChange={this.handleAttackAmountChange}\n            />\n          </div>\n          <div className=\"unit-container blue-border\">\n            <h3 className=\"label\">Defence:</h3>\n            <input \n              id=\"defenceAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.defenceAmount}\n              onChange={this.handleDefenceAmountChange}\n            />\n          </div>\n          <div className=\"unit-container\">\n            <h3 className=\"label\">History Length:</h3>\n            <input \n              id=\"historyLength\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.historyLength}\n              onChange={this.handleHistoryLengthChange}\n            />\n          </div>\n        </div>\n        <div className=\"container-row\">\n          <button\n            id=\"run-single-battle-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleRunSingleBattleClick}\n          >Single Battle</button>\n          <button\n            id=\"run-battles-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleRunBattlesClick}\n          >Run Battles</button>\n          <button\n            id=\"clear-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleClearClick}\n          >Clear</button>\n        </div>\n        <div className=\"spacer\"></div>\n        <div className=\"container-row\">\n          <h3 className=\"label\">Average Damage:</h3>\n          <p className=\"result-value\">{round(this.state.avgDamage ?? 0, 6)}</p>\n          <h3 className=\"label\">Cumulative Average Damage:</h3>\n          <p className=\"result-value\">{round(this.state.cumAvgDamage ?? 0, 6)}</p>\n        </div>\n        {this.renderRoll(this.state.attackRoll, this.state.defenceRoll, \"currentRoll\", true)}\n        <div className=\"spacer\"></div>\n        <div className=\"spacer\"></div>\n        {this.renderPreviousRolls()}\n      </div>\n    )\n  }\n\n  runSingleBattle() {\n    // Save previous roll to history\n    this.rollHistory.unshift({\n      attackRoll: [...this.latestBattleRoll?.attackRoll ?? []],\n      defenceRoll: [...this.latestBattleRoll?.defenceRoll ?? []]\n    })\n\n    const {attackRoll, defenceRoll} = runBattle(this.state.attackAmount, this.state.defenceAmount);\n\n    // Update latest battle roll with new results\n    this.latestBattleRoll = {attackRoll, defenceRoll};\n\n    if (this.rollHistory.length > this.state.historyLength) {\n      this.rollHistory = this.rollHistory.slice(0, this.state.historyLength);\n    }\n\n    this.battleCounter++;\n\n    // Track damage\n    const damage = calcDamage(attackRoll, defenceRoll);\n    if (this.damageTracker.length === 0) {\n      this.damageTracker = [damage];\n    } else {\n      this.damageTracker.push(damage);\n    }\n\n    this.setState({\n      attackRoll,\n      defenceRoll,\n      battleCounter: this.battleCounter,\n      damageTracker: this.damageTracker,\n      cumAvgDamage: flattenedAverage(this.damageTracker)\n    });\n\n    return damage;\n  }\n\n  renderRoll(attackRoll, defenceRoll, key, background = false) {\n\n    const damage = calcDamage(attackRoll, defenceRoll);\n\n    return ( \n      attackRoll?.length > 0 || defenceRoll?.length > 0 ?\n      \n        <div\n          className={`container-row unit-container side-spaced no-border ${!background ? \"no-background\" : \"\"}`}\n          key={key}\n        >\n          <div className=\"container-row row-double-spaced leading-list\">\n            {this.displayDice(\"attack\", attackRoll)}\n          </div>\n          <div className=\"label row-auto-spaced\">\n            {\"-->\"}\n          </div>\n          <div className=\"container-row row-double-spaced leading-list\">\n            {this.displayDice(\"defence\", defenceRoll)}\n          </div>\n          <h3 className=\"label\">Damage:</h3>\n          <p className=\"result-value\">{flattenNegative(damage)}</p>\n        </div> : null\n    );\n  }\n\n  renderPreviousRolls() {\n    const rolls = this.rollHistory.map((roll, i) => {\n      return this.renderRoll(roll.attackRoll, roll.defenceRoll, `previousRoll-${i}`);\n    });\n\n    return [\n      ...rolls,\n      this.state.battleCounter > this.state.historyLength + 1 ? \n        <div className=\"label elipsis\" key=\"elipsis\">. . . . . </div>\n        : null\n    ];\n  }\n\n  displayDice(type, rollResults = []) {\n    const dice = [];\n    rollResults.forEach((die, i) => {\n      dice.push(\n        <BattleDice diceType={type} value={die} key={`${i}-${type}-${die}`}></BattleDice>\n      )\n    });\n\n    return dice;\n  }\n}","import React, { Component } from 'react';\nimport HeroscapeSimulator from \"./components/HeroscapeSimulator/HeroscapeSimulator\";\n\nclass App extends Component {\n  constructor(){\n      super();\n\n      this.state = {\n          result: \"\"\n      }\n  }\n\n  render() {\n      return (\n          <div>\n              <div className=\"component-body\">\n                  <HeroscapeSimulator></HeroscapeSimulator>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}