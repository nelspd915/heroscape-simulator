{"version":3,"sources":["utils/battle.js","components/HeroscapeSimulator/HeroscapeSimulator.js","App.js","reportWebVitals.js","index.js"],"names":["rollDice","amount","sides","results","i","push","Math","floor","random","examineDice","resultDice","hitTargets","hits","forEach","die","includes","HeroscapeSimulator","props","handleRollsAmountChange","e","setState","rollsAmount","target","value","handleAttackAmountChange","attackAmount","handleDefenceAmountChange","defenceAmount","handleRunSingleBattleClick","damage","attack","defence","console","log","attackResultDice","attackResult","constants","ATTACK_HITS","defenceResultDice","defenceResult","DEFENCE_HITS","runBattle","state","singleBattleDamage","this","className","id","type","onChange","onClick","Component","App","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c877acb0.chunk.js","sourcesContent":["import constants from \"./constants.json\";\r\n\r\nexport function runBattle(attack, defence) {\r\n    console.log(\"runBattle:\", attack, defence);\r\n\r\n    // Attack roll\r\n    const attackResultDice = rollDice(attack, 6);\r\n    const attackResult = examineDice(attackResultDice, constants.ATTACK_HITS);\r\n    console.log(\"Attack\");\r\n    console.log(attackResultDice);\r\n    console.log(attackResult);\r\n\r\n    // Defence roll\r\n    const defenceResultDice = rollDice(defence, 6);\r\n    const defenceResult = examineDice(defenceResultDice, constants.DEFENCE_HITS);\r\n    console.log(\"Defence\");\r\n    console.log(defenceResultDice);\r\n    console.log(defenceResult);\r\n\r\n    const damage = attackResult - defenceResult;\r\n\r\n    console.log(\"DAMAGE:\", damage < 0 ? 0 : damage);\r\n\r\n    return damage < 0 ? 0 : damage;\r\n}\r\n\r\nfunction rollDice(amount, sides) {\r\n    const results = [];\r\n    for (let i = 0; i < amount; i++) {\r\n        results.push(Math.floor(Math.random() * sides) + 1);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction examineDice(resultDice, hitTargets) {\r\n    let hits = 0;\r\n    resultDice.forEach(die => {\r\n        if (hitTargets.includes(die)) {\r\n            hits++;\r\n        }\r\n    })\r\n\r\n    return hits;\r\n}","import React, { Component } from 'react';\nimport { runBattle } from '../../utils/battle';\nimport './HeroscapeSimulator.css'\n\nexport default class HeroscapeSimulator extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      rollsAmount: 0,\n      attackAmount: 0,\n      defenceAmount: 0,\n      singleBattleDamage: 0\n    };\n  }\n\n  // Change handlers\n  handleRollsAmountChange = (e) => { this.setState({rollsAmount: e.target.value}) };\n  handleAttackAmountChange = (e) => { this.setState({attackAmount: e.target.value}) };\n  handleDefenceAmountChange = (e) => { this.setState({defenceAmount: e.target.value}) };\n\n  // Click handlers\n  handleRunSingleBattleClick = () => {\n    const damage = runBattle(this.state.attackAmount, this.state.defenceAmount);\n    this.setState({singleBattleDamage: damage});\n  };\n\n  render() {\n    console.log(\"state:\", this.state);\n    return(\n      <div>\n        <h1>Heroscape Simulator</h1>\n        <div className=\"container-row\">\n          <div className=\"unit-container\">\n            <h3 className=\"label\">Rolls:</h3>\n            <input \n              id=\"rollsAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.rollsAmount}\n              onChange={this.handleRollsAmountChange}\n            />\n          </div>\n          <div className=\"unit-container red-border\">\n            <h3 className=\"label\">Attack:</h3>\n            <input \n              id=\"attackAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.attackAmount}\n              onChange={this.handleAttackAmountChange}\n            />\n          </div>\n          <div className=\"unit-container blue-border\">\n            <h3 className=\"label\">Defence:</h3>\n            <input \n              id=\"defenceAmount\"\n              className=\"input-parameter\"\n              type=\"number\"\n              value={this.state.defenceAmount}\n              onChange={this.handleDefenceAmountChange}\n            />\n          </div>\n        </div>\n        <div className=\"container-row\">\n          <button\n            id=\"run-single-battle-button\"\n            className=\"button-control\"\n            type=\"button\"\n            onClick={this.handleRunSingleBattleClick}\n          >Run single battle</button>\n        </div>\n        <div className=\"container-row\">\n          <h3 className=\"label\">Damage:</h3>\n          <p className=\"result-value\">{this.state.singleBattleDamage}</p>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport HeroscapeSimulator from \"./components/HeroscapeSimulator/HeroscapeSimulator\";\n\nclass App extends Component {\n  constructor(){\n      super();\n\n      this.state = {\n          result: \"\"\n      }\n  }\n\n  render() {\n      return (\n          <div>\n              <div className=\"component-body\">\n                  <HeroscapeSimulator></HeroscapeSimulator>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}